{{- /*
Aggregate ExternalName services from ingressRoutes and classicIngresses into a single Service
per unique (name, externalName) pair. Avoid duplicate ports.
*/ -}}

{{- $services := dict -}}

{{- define "collectExternalNameServices" -}}
  {{- $svcMap := index . 0 -}}
  {{- $routeList := index . 1 -}}
  {{- range $routeList }}
    {{- range .routes }}
      {{- range .services }}
        {{- if eq .type "ExternalName" }}
          {{- $key := printf "%s|%s" .name .externalName }}
          {{- $existing := index $svcMap $key | default (dict "name" .name "externalName" .externalName "ports" (list)) }}
          {{- $ports := $existing.ports }}
          {{- $isDup := false }}
          {{- range $p := $ports }}
            {{- if and (eq (int $p.port) (int .port)) (eq (int $p.targetPort) (int .targetPort)) }}
              {{- $isDup = true }}
            {{- end }}
          {{- end }}
          {{- if not $isDup }}
            {{- $ports = append $ports (dict "port" .port "targetPort" .targetPort) }}
          {{- end }}
          {{- $_ := set $existing "ports" $ports }}
          {{- $_ := set $svcMap $key $existing }}
        {{- end }}
      {{- end }}
    {{- end }}
  {{- end }}
{{- end }}

{{/* Collect from ingressRoutes */}}
{{- include "collectExternalNameServices" (list $services .Values.ingressRoutes) }}

{{/* Collect from classicIngresses */}}
{{- include "collectExternalNameServices" (list $services .Values.classicIngresses) }}

{{/* Render final Service manifests */}}
{{- range $svc := $services }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ $svc.name }}
  namespace: {{ $.Release.Namespace }}
spec:
  type: ExternalName
  externalName: {{ $svc.externalName }}
  ports:
    {{- range $svc.ports }}
    - port: {{ .port }}
      targetPort: {{ .targetPort }}
    {{- end }}
{{- end }}