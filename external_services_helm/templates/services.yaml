{{- $services := dict -}}

{{- /* Collect services from ingressRoutes */ -}}
{{- range .Values.ingressRoutes }}
  {{- $ns := default $.Release.Namespace .namespace }}
  {{- range .routes }}
    {{- range .services }}
      {{- $key := printf "%s/%s" $ns .name }}
      {{- if not (hasKey $services $key) }}
        {{- $_ := set $services $key (dict "name" .name "namespace" $ns "externalName" .externalName "port" .port) }}
      {{- end }}
    {{- end }}
  {{- end }}
{{- end }}

{{- /* Collect services from classicIngresses */ -}}
{{- range .Values.classicIngresses }}
  {{- $ns := default $.Release.Namespace .namespace }}
  {{- range .services }}
    {{- $key := printf "%s/%s" $ns .name }}
    {{- if not (hasKey $services $key) }}
      {{- $_ := set $services $key (dict "name" .name "namespace" $ns "externalName" .externalName "port" .port) }}
    {{- end }}
  {{- end }}
{{- end }}

{{- /* Output all unique Services */ -}}
{{- range $key, $svc := $services }}
apiVersion: v1
kind: Service
metadata:
  name: {{ $svc.name }}
  namespace: {{ $svc.namespace }}
spec:
  type: ExternalName
  externalName: {{ $svc.externalName }}
  ports:
    - port: {{ $svc.port }}
      targetPort: {{ $svc.port }}
---
{{- end }}